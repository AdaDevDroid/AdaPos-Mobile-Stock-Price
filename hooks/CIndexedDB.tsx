import { History, Product, UserInfo, SysConfig } from "@/models/models"

export const C_PRCxOpenIndexedDB = async () => {
  const DB_NAME = "AdaDB";
  const DB_VERSION = 11;

  return new Promise<IDBDatabase>((resolve, reject) => {
    const request = indexedDB.open(DB_NAME, DB_VERSION);

    request.onupgradeneeded = (event) => {
      const db = (event.target as IDBOpenDBRequest).result;

      // üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á TCNTUserTmp ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
      if (!db.objectStoreNames.contains("TCNTUserTmp")) {
        const store = db.createObjectStore("TCNTUserTmp", { autoIncrement: true });
        store.createIndex("FTUsrCode", "FTUsrCode", { unique: false });
        store.createIndex("FTUsrLogin", "FTUsrLogin", { unique: false });
        store.createIndex("FTUsrPass", "FTUsrPass", { unique: false });
        store.createIndex("FTUsrName", "FTUsrName", { unique: false });
        store.createIndex("FTBchCode", "FTBchCode", { unique: false });
        store.createIndex("FTAgnCode", "FTAgnCode", { unique: false });
        store.createIndex("FTMerCode", "FTMerCode", { unique: false });
        console.log("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'TCNTUserTmp' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }
      //TsysConfig
      //limitdata, ‡∏à‡∏∏‡∏î‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡πÅ‡∏™‡∏î‡∏á, ‡∏à‡∏∏‡∏î‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      if (!db.objectStoreNames.contains("TsysConfig")) {
        const store = db.createObjectStore("TsysConfig", { autoIncrement: true });
        store.createIndex("FTSysCode", "FTSysCode", { unique: false });
        store.createIndex("FTSysStaUsrValue", "FTSysStaUsrValue", { unique: false });
        console.log("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'TsysConfig' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }

      // üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á TCNTHistoryReceive ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
      if (!db.objectStoreNames.contains("TCNTHistoryReceive")) {
        const store = db.createObjectStore("TCNTHistoryReceive", { autoIncrement: true });
        store.createIndex("FTDate", "FTDate", { unique: false });
        store.createIndex("FTRefDoc", "FTRefDoc", { unique: false });
        store.createIndex("FNStatus", "FNStatus", { unique: false });
        store.createIndex("FTRefSeq", "FTRefSeq", { unique: false });

        console.log("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'TCNTHistoryReceive' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }

      // üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á TCNTProductReceive ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
      if (!db.objectStoreNames.contains("TCNTProductReceive")) {
        const store = db.createObjectStore("TCNTProductReceive", { autoIncrement: true });
        store.createIndex("FNId", "FNId", { unique: false });
        store.createIndex("FTBarcode", "FTBarcode", { unique: false });
        store.createIndex("FCCost", "FCCost", { unique: false });
        store.createIndex("FNQuantity", "FNQuantity", { unique: false });
        store.createIndex("FTRefDoc", "FTRefDoc", { unique: false });
        store.createIndex("FTRefSeq", "FTRefSeq", { unique: false });
        store.createIndex("FTXthDocKey", "FTXthDocKey", { unique: false });
        store.createIndex("FTBchCode", "FTBchCode", { unique: false });
        store.createIndex("FTAgnCode", "FTAgnCode", { unique: false });
        store.createIndex("FTUsrName", "FTUsrName", { unique: false });
        store.createIndex("FDCreateOn", "FDCreateOn", { unique: false });
        console.log("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'TCNTProductReceive' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }

      // üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á TCNTHistoryTransfer ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
      if (!db.objectStoreNames.contains("TCNTHistoryTransfer")) {
        const store = db.createObjectStore("TCNTHistoryTransfer", { autoIncrement: true });
        store.createIndex("FTDate", "FTDate", { unique: false });
        store.createIndex("FTRefDoc", "FTRefDoc", { unique: false });
        store.createIndex("FNStatus", "FNStatus", { unique: false });
        store.createIndex("FTRefSeq", "FTRefSeq", { unique: false });
        console.log("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'TCNTHistoryReceive' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }

      // üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á TCNTProductTransfer ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
      if (!db.objectStoreNames.contains("TCNTProductTransfer")) {
        const store = db.createObjectStore("TCNTProductTransfer", { autoIncrement: true });
        store.createIndex("FNId", "FNId", { unique: false });
        store.createIndex("FTBarcode", "FTBarcode", { unique: false });
        store.createIndex("FCCost", "FCCost", { unique: false });
        store.createIndex("FNQuantity", "FNQuantity", { unique: false });
        store.createIndex("FTRefDoc", "FTRefDoc", { unique: false });
        store.createIndex("FTRefSeq", "FTRefSeq", { unique: false });
        store.createIndex("FTXthDocKey", "FTXthDocKey", { unique: false });
        store.createIndex("FTBchCode", "FTBchCode", { unique: false });
        store.createIndex("FTAgnCode", "FTAgnCode", { unique: false });
        store.createIndex("FTUsrName", "FTUsrName", { unique: false });
        store.createIndex("FDCreateOn", "FDCreateOn", { unique: false });
        console.log("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'TCNTProductReceive' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }

      // üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á TCNTHistoryStock ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
      if (!db.objectStoreNames.contains("TCNTHistoryStock")) {
        const store = db.createObjectStore("TCNTHistoryStock", { autoIncrement: true });
        store.createIndex("FTDate", "FTDate", { unique: false });
        store.createIndex("FTRefDoc", "FTRefDoc", { unique: false });
        store.createIndex("FNStatus", "FNStatus", { unique: false });
        store.createIndex("FTRefSeq", "FTRefSeq", { unique: false });
        console.log("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'TCNTHistoryReceive' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }

      // üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á TCNTProductStock ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
      if (!db.objectStoreNames.contains("TCNTProductStock")) {
        const store = db.createObjectStore("TCNTProductStock", { autoIncrement: true });
        store.createIndex("FNId", "FNId", { unique: false });
        store.createIndex("FTBarcode", "FTBarcode", { unique: false });
        store.createIndex("FNQuantity", "FNQuantity", { unique: false });
        store.createIndex("FTRefDoc", "FTRefDoc", { unique: false });
        store.createIndex("FTRefSeq", "FTRefSeq", { unique: false });
        store.createIndex("FTXthDocKey", "FTXthDocKey", { unique: false });
        store.createIndex("FTBchCode", "FTBchCode", { unique: false });
        store.createIndex("FTAgnCode", "FTAgnCode", { unique: false });
        store.createIndex("FTUsrName", "FTUsrName", { unique: false });
        store.createIndex("FDCreateOn", "FDCreateOn", { unique: false });
        console.log("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'TCNTProductReceive' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }
      
    };

    request.onsuccess = () => {
      console.log("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ IndexedDB ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      resolve(request.result);
    };

    request.onerror = () => {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", request.error);
      reject(request.error);
    };
  });
};

export const C_DELxLimitData = async (oDb: IDBDatabase, pnLimitData: number, ptHistoryName: string, ptDataList: string): Promise<void> => {

  const deletedRefDocs = await C_DELxHistoryData(oDb!!, ptHistoryName, pnLimitData);
  if (deletedRefDocs.length > 0) {
    console.log("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö", deletedRefDocs);
    await C_DELxProductsByRefDocs(oDb!!, deletedRefDocs, ptDataList);
  }
}

export const C_GETxUserData = async (oDb: IDBDatabase): Promise<UserInfo | null> => {
  return new Promise((resolve, reject) => {
    try {
      // üîπ ‡πÄ‡∏õ‡∏¥‡∏î transaction ‡πÅ‡∏ö‡∏ö readonly
      const transaction = oDb.transaction("TCNTUserTmp", "readonly");
      const store = transaction.objectStore("TCNTUserTmp");
      const request = store.getAll();

      request.onsuccess = () => {
        if (request.result.length > 0) {
          const userData = request.result[0]; // ‡πÄ‡∏≠‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
          const userInfo: UserInfo = {
            FTUsrName: userData.FTUsrName,
            FTBchCode: userData.FTBchCode,
            FTAgnCode: userData.FTAgnCode,
            FTMerCode: userData.FTMerCode,
            FTUsrLogin: userData.FTUsrLogin,
            FTUsrPass: userData.FTUsrPass,
            FTUsrCode: userData.FTUsrCode
          };
          resolve(userInfo);
        } else {
          console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô IndexedDB");
          resolve(null);
        }
      };

      request.onerror = () => {
        console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å IndexedDB");
        reject(null);
      };
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:", error);
      reject(null);
    }
  });
};

export const C_INSxUserToDB = async (oDb: IDBDatabase, userData: UserInfo): Promise<boolean> => {
  return new Promise((resolve, reject) => {
    if (!oDb) {
      console.error("‚ùå Database is not initialized");
      reject(false);
      return;
    }

    const transaction = oDb.transaction("TCNTUserTmp", "readwrite");
    const store = transaction.objectStore("TCNTUserTmp");

    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á TCNTUserTmp
    const clearRequest = store.clear();

    clearRequest.onsuccess = () => {
      console.log("‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'TCNTUserTmp' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
      const addRequest = store.add(userData);

      addRequest.onsuccess = () => {
        console.log("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", userData);
        resolve(true);
      };

      addRequest.onerror = (event) => {
        console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ", event);
        reject(false);
      };
    };

    clearRequest.onerror = (event) => {
      console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'TCNTUserTmp' ‡πÑ‡∏î‡πâ", event);
      reject(false);
    };
  });
};

export const C_INSoSysConfigToDB = async (oDb: IDBDatabase, oSysConfig: SysConfig): Promise<boolean> => {
  return new Promise((resolve, reject) => {
    if (!oDb) {
      console.error("‚ùå Database is not initialized");
      reject(false);
      return;
    }

    const transaction = oDb.transaction("TsysConfig", "readwrite");
    const store = transaction.objectStore("TsysConfig");

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
    const addRequest = store.add(oSysConfig);

    addRequest.onsuccess = () => {
      console.log("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", oSysConfig);
      resolve(true);
    };

    addRequest.onerror = (event) => {
      console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'TsysConfig' ‡πÑ‡∏î‡πâ", event);
      reject(false);
    };
 
  });
};

export const C_DELoSysConfigData = async (oDb: IDBDatabase): Promise<void> => {
  return new Promise((resolve, reject) => {
    const transaction = oDb.transaction("TsysConfig", "readwrite");
    const store = transaction.objectStore("TsysConfig");

    const clearRequest = store.clear();

    clearRequest.onsuccess = () => {
      console.log("‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'TsysConfig' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      resolve();
    };

    clearRequest.onerror = (event) => {
      console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'TsysConfig' ‡πÑ‡∏î‡πâ", event);
      reject(event);
    };
  });
};

export const C_INSxDataIndexedDB = async (oDb: IDBDatabase, storeName: string, data: (History | Product)[]) => {
  try {

    if (!oDb) {
      console.error("‚ùå Database is not initialized");
      return;
    }
    const transaction = oDb.transaction(storeName, "readwrite");
    const store = transaction.objectStore(storeName);

    data.forEach((item) => {
      const addRequest = store.add(item);
      addRequest.onerror = () => console.error(`‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, addRequest.error);
    });

    transaction.oncomplete = () => {
      console.log(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô '${storeName}'`);
    };

    transaction.onerror = () => {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", transaction.error || "Unknown Error");
    };
  } catch (error) {
    console.error("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô IndexedDB", error);
  }
};

const C_DELxHistoryData = async (oDb: IDBDatabase, ptTableName: string, pnLimitData: number): Promise<string[]> => {
  return new Promise(async (resolve, reject) => {
    const storeName = ptTableName;
    const limitData = pnLimitData;
    const deletedRefDocs: string[] = [];

    try {
      const count = await C_GETxCountFromdDB(oDb, storeName);
      if (count <= limitData) {
        console.log("‚úÖ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô limit)");
        resolve([]);
        return;
      }

      console.log("‚úÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô limit...");
      const transaction = oDb.transaction(storeName, "readwrite");
      const store = transaction.objectStore(storeName);
      const request = store.openCursor();

      let deleteCount = count - limitData;

      request.onsuccess = (event) => {
        const cursor = (event.target as IDBRequest<IDBCursorWithValue>).result;
        if (cursor && deleteCount > 0) {
          const deletedRef = cursor.value.FTRefSeq;
          deletedRefDocs.push(deletedRef);
          cursor.delete();
          deleteCount--;
          cursor.continue();
        } else {
          console.log(`‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${deletedRefDocs.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å ${storeName} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
          resolve(deletedRefDocs);
        }
      };

      request.onerror = () => {
        console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ${storeName}`);
        reject([]);
      };
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", error);
      reject([]);
    }
  });
};

const C_DELxProductsByRefDocs = async (oDb: IDBDatabase, refDocs: string[], ptTableName: string): Promise<void> => {
  return new Promise((resolve, reject) => {
    const storeName = ptTableName;
    const transaction = oDb.transaction(storeName, "readwrite");
    const store = transaction.objectStore(storeName);

    let deletedCount = 0;

    refDocs.forEach((refDoc) => {
      const index = store.index("FTRefSeq");
      const request = index.openCursor(IDBKeyRange.only(refDoc));

      request.onsuccess = (event) => {
        const cursor = (event.target as IDBRequest<IDBCursorWithValue>).result;
        if (cursor) {
          cursor.delete();
          deletedCount++;
          cursor.continue();
        }
      };

      request.onerror = () => {
        console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ${storeName} ‡∏ó‡∏µ‡πà FTRefSeq = ${refDoc}`);
        console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ${storeName} ‡∏ó‡∏µ‡πà FTRefSeq = ${refDoc}`);
      };
    });

    transaction.oncomplete = () => {
      console.log(`‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${deletedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å ${storeName} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      resolve();
    };

    transaction.onerror = () => {
      console.error(`‚ùå ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ${storeName} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß`);
      reject();
    };
  });
};

export const C_GETxCountFromdDB = async (oDB: IDBDatabase, storeName: string): Promise<number> => {
  return new Promise((resolve) => {

    const transaction = oDB.transaction(storeName, "readonly");
    const store = transaction.objectStore(storeName);
    const request = store.count(); // ‡πÉ‡∏ä‡πâ count() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

    request.onsuccess = () => {
      resolve(request.result); // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    };

    request.onerror = () => {
      console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å IndexedDB ‡πÑ‡∏î‡πâ");
      resolve(0);
    };
  });
};
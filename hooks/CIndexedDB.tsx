export const C_PRCxOpenIndexedDB = async () => {
  const DB_NAME = "AdaDB";
  const DB_VERSION = 3;

  return new Promise<IDBDatabase>((resolve, reject) => {
    const request = indexedDB.open(DB_NAME, DB_VERSION);

    request.onupgradeneeded = (event) => {
      const db = (event.target as IDBOpenDBRequest).result;

      // üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á TCNTHistoryReceive ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
      if (!db.objectStoreNames.contains("TCNTHistoryReceive")) {
        const store = db.createObjectStore("TCNTHistoryReceive", { keyPath: "FTRefDoc", autoIncrement: true });
        store.createIndex("FTDate", "FTDate", { unique: false });
        store.createIndex("FTRefDoc", "FTRefDoc", { unique: false });
        store.createIndex("FNStatus", "FNStatus", { unique: false });
        console.log("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'TCNTHistoryReceive' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }

      // üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á TCNTProductReceive ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
      if (!db.objectStoreNames.contains("TCNTProductReceive")) {
        const store = db.createObjectStore("TCNTProductReceive", { autoIncrement: true });
        store.createIndex("FNId", "FNId", { unique: false });
        store.createIndex("FTBarcode", "FTBarcode", { unique: false });
        store.createIndex("FCCost", "FCCost", { unique: false });
        store.createIndex("FNQuantity", "FNQuantity", { unique: false });
        store.createIndex("FTRefDoc", "FTRefDoc", { unique: false });
        console.log("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'TCNTProductReceive' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }
    };

    request.onsuccess = () => {
      console.log("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ IndexedDB ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      resolve(request.result);
    };

    request.onerror = () => {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", request.error);
      reject(request.error);
    };
  });
};

export const C_DELxLimitData = async (oDb: IDBDatabase, pnLimitData: number, ptHistoryName: string, ptDataList: string): Promise<void> => {

  const deletedRefDocs = await cleanupHistoryData(oDb!!, ptHistoryName, pnLimitData);
  if (deletedRefDocs.length > 0) {
    await deleteProductsByRefDocs(oDb!!, deletedRefDocs, ptDataList);
  }

}

const cleanupHistoryData = async (oDb: IDBDatabase, ptTableName: string, pnLimitData: number): Promise<string[]> => {
  return new Promise(async (resolve, reject) => {
    const storeName = ptTableName;
    const limitData = pnLimitData;
    const deletedRefDocs: string[] = [];

    try {
      const count = await C_GETxCountFromdDB(oDb, storeName);
      if (count <= limitData) {
        console.log("‚úÖ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô limit)");
        resolve([]);
        return;
      }

      console.log("‚úÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô limit...");
      const transaction = oDb.transaction(storeName, "readwrite");
      const store = transaction.objectStore(storeName);
      const request = store.openCursor();

      let deleteCount = count - limitData;

      request.onsuccess = (event) => {
        const cursor = (event.target as IDBRequest<IDBCursorWithValue>).result;
        if (cursor && deleteCount > 0) {
          const deletedRef = cursor.value.FTRefDoc;
          deletedRefDocs.push(deletedRef); 
          cursor.delete(); 
          deleteCount--; 
          cursor.continue(); 
        } else {
          console.log(`‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${deletedRefDocs.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å ${storeName} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
          resolve(deletedRefDocs); 
        }
      };

      request.onerror = () => {
        console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ${storeName}`);
        reject([]);
      };
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", error);
      reject([]);
    }
  });
};

const deleteProductsByRefDocs = async (oDb: IDBDatabase, refDocs: string[], ptTableName: string): Promise<void> => {
  return new Promise((resolve, reject) => {
    const storeName = ptTableName;
    const transaction = oDb.transaction(storeName, "readwrite");
    const store = transaction.objectStore(storeName);

    let deletedCount = 0;

    refDocs.forEach((refDoc) => {
      const index = store.index("FTRefDoc");
      const request = index.openCursor(IDBKeyRange.only(refDoc));

      request.onsuccess = (event) => {
        const cursor = (event.target as IDBRequest<IDBCursorWithValue>).result;
        if (cursor) {
          cursor.delete();
          deletedCount++;
          cursor.continue();
        }
      };

      request.onerror = () => {
        console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ${storeName} ‡∏ó‡∏µ‡πà FTRefDoc = ${refDoc}`);
      };
    });

    transaction.oncomplete = () => {
      console.log(`‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${deletedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å ${storeName} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      resolve();
    };

    transaction.onerror = () => {
      console.error(`‚ùå ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ${storeName} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß`);
      reject();
    };
  });
};

const C_GETxCountFromdDB = async (oDB: IDBDatabase, storeName: string): Promise<number> => {
  return new Promise((resolve) => {

    const transaction = oDB.transaction(storeName, "readonly");
    const store = transaction.objectStore(storeName);
    const request = store.count(); // ‡πÉ‡∏ä‡πâ count() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

    request.onsuccess = () => {
      resolve(request.result); // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    };

    request.onerror = () => {
      console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å IndexedDB ‡πÑ‡∏î‡πâ");
      resolve(0);
    };
  });
};